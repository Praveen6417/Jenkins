pipeline {
    agent {
        label 'Agent - 1'
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    // parameters{
    //     choice(name: 'CHOICE', choices: ['plan','apply','destroy'], description: 'Pick something')
    // }
    environment {
        def version = ' '
    }
    stages {
        stage('init') {
            steps {
                dir('Backend'){
                sh """ ls -ltr """
                } 
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('Backend'){
                sh """ npm install """
                } 
            }
        }
        stage('Version') {
            steps {
                dir('Backend'){
                    script {
                        def packageJson = readJSON file: 'package.json'
                        version = packageJson.version
                        echo "Application Version = $version"
                        sh "ls -ltr"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                dir('Backend'){
                sh """ 
                zip -r Backend-$version * -x Jenkinsfile 
                ls -ltr
                """
                } 
            }
        }
        stage('Nexus-Artifact-Uploader'){
            steps {
                dir('Backend'){
                    sh " ls -ltr"
                    script{
                         nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: '54.91.202.72:8081',
                            groupId: 'com.expense',
                            version: "${version}",
                            repository: "backend",
                            credentialsId: 'nexus-auth',
                            artifacts: [
                                [artifactId: 'Backend',
                                classifier: '',
                                file: 'Backend-' + "${version}" + '.zip',
                                type: 'zip']
                            ]
                        )
                    }
                }
            }
        }
        // stage('Destroy') {
        //     steps {

        //     }
        // }
    }

    post { 
        always { 
            echo 'I will always say Hello again!'
            // deleteDir()
        }
        success { 
            echo 'I will run when pipeline is success'
        }
        failure { 
            echo 'I will run when pipeline is failure'
        }

    }
    
}
